#!/sbin/runscript
# Copyright 1999-2006 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: /CVS/groups/vistech/bgreen-overlay/sys-cluster/openib-drivers/files/openib,v 1.1.1.1 2007/10/12 20:18:26 bgreen Exp $

# Based on openibd script from openfabrics.org,
#  Copyright (c) 2006 Mellanox Technologies. All rights reserved.
#  Distributed under the terms of the GNU General Public License v2

depend() {
    after coldplug hotplug
    before net         # init openib before starting any ipoib interfaces
}

OPENIB_CONFDIR=${OPENIB_CONFDIR:-/etc/infiniband}

if [[ -r ${OPENIB_CONFDIR}/openib.conf ]] ; then
    . ${OPENIB_CONFDIR}/openib.conf
fi

max_ports_num_in_hca=0

count_ib_ports()
{
    local cnt=0
    local ports_in_hca=0
    sysdir=/sys/class/infiniband
    hcas=$(/bin/ls -1 ${sysdir} 2> /dev/null)
    for hca in $hcas
    do
        ports_in_hca=$(/bin/ls -1 ${sysdir}/${hca}/ports 2> /dev/null | wc -l)
        if [ $ports_in_hca -gt $max_ports_num_in_hca ]; then
                max_ports_num_in_hca=$ports_in_hca
        fi
        cnt=$[ $cnt + $ports_in_hca ]
    done
   
    return $cnt
}

# Setting OpenIB start parameters
POST_LOAD_MODULES=""

if [ "X${SDP_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES ib_sdp"
    IPOIB_LOAD="yes"
fi

IPOIB=0
IPOIB_MTU=${IPOIB_MTU:-65520}
if [ "X${IPOIB_LOAD}" == "Xyes" ]; then
    IPOIB=1
fi

if [ "X${SRP_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES ib_srp"
fi

if [ "X${VNIC_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES ib_vnic"
fi

if [ "X${SRP_TARGET_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES ib_srp_target"
fi

if [ "X${RDMA_CM_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES rdma_cm"
fi

if [ "X${UCM_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES ib_ucm"
fi

if [ "X${RDS_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES rds"
fi

if [ "X${ISER_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES ib_iser"
fi

if [ "X${RDMA_UCM_LOAD}" == "Xyes" ]; then
    POST_LOAD_MODULES="$POST_LOAD_MODULES rdma_ucm"
fi

UNLOAD_MODULES="ib_ipoib ib_madeye ib_rds rds ib_ucm kdapl ib_srp_target scsi_target ib_srp ib_vnic"
UNLOAD_MODULES="$UNLOAD_MODULES ib_iser ib_sdp rdma_ucm rdma_cm ib_addr ib_cm ib_local_sa findex"
UNLOAD_MODULES="$UNLOAD_MODULES ib_sa ib_uverbs ib_umad ib_mthca ib_ipath ipath_core ib_ehca ib_mad ib_core"

STATUS_MODULES="rdma_ucm ib_rds rds ib_srp ib_vnic ib_sdp rdma_cm ib_addr ib_local_sa findex ib_ipoib ib_ehca ib_ipath ipath_core ib_mthca ib_uverbs ib_umad ib_ucm ib_sa ib_cm ib_mad ib_core"

ipoib_ha_pidfile=/var/run/ipoib_ha.pid
srp_daemon_pidfile=/var/run/srp_daemon.pid

get_interfaces()
{
    count_ib_ports
    ports_num=$?
                       
    interfaces=""
    for (( i=0 ; i < $ports_num ; i++ ))
    do
        interfaces="$interfaces ib${i}"
    done    
}

# If module $1 is loaded return - 0 else - 1
is_module()
{
    local RC

    /sbin/lsmod | grep -w "$1" > /dev/null 2>&1
    RC=$?

    return $RC
}

get_sw_fw_info()
{
    INFO=/etc/infiniband/info
    OFEDHOME="/usr/local"
    if [ -x ${INFO} ]; then
        OFEDHOME=$(${INFO} | grep -w prefix | cut -d '=' -f 2)
    fi
    MREAD=$(which mread 2> /dev/null)
    
    # Get OFED Build id
    if [ -r ${OFEDHOME}/BUILD_ID ]; then
        echo  "Software"
        echo  "-------------------------------------"
        printf "Build ID:\n"
        cat ${OFEDHOME}/BUILD_ID
        echo  "-------------------------------------"
    fi    

    # Get FW version
    if [ ! -x ${MREAD} ]; then
        return 1
    fi

    vendor="15b3"
    slots=$(lspci -n -d "${vendor}:" 2> /dev/null | grep -v "5a46" | cut -d ' ' -f 1)
    for mst_device in $slots
    do
        major=$($MREAD ${mst_device} 0x82478 2> /dev/null | cut -d ':' -f 2)
        subminor__minor=$($MREAD ${mst_device} 0x8247c 2> /dev/null | cut -d ':' -f 2)
        ftime=$($MREAD ${mst_device} 0x82480 2> /dev/null | cut -d ':' -f 2)
        fdate=$($MREAD ${mst_device} 0x82484 2> /dev/null | cut -d ':' -f 2)

        major=$(echo -n $major | cut -d x -f 2 | cut -b 4)
        subminor__minor1=$(echo -n $subminor__minor | cut -d x -f 2 | cut -b 3,4)
        subminor__minor2=$(echo -n $subminor__minor | cut -d x -f 2 | cut -b 5,6,7,8)
        echo
        echo "Device ${mst_device} Info:"
        echo "Firmware:"

        printf "\tVersion:"
        printf "\t$major.$subminor__minor1.$subminor__minor2\n"

        day=$(echo -n $fdate | cut -d x -f 2 | cut -b 7,8)
        month=$(echo -n $fdate | cut -d x -f 2 | cut -b 5,6)
        year=$(echo -n $fdate | cut -d x -f 2 | cut -b 1,2,3,4)
        hour=$(echo -n $ftime | cut -d x -f 2 | cut -b 5,6)
        min=$(echo -n $ftime | cut -d x -f 2 | cut -b 3,4)
        sec=$(echo -n $ftime | cut -d x -f 2 | cut -b 1,2)
        
        printf "\tDate:"
        printf "\t$day/$month/$year $hour:$min:$sec\n"
    done
}

# Create debug info
get_debug_info()
{
    trap '' 2 9 15
    DEBUG_INFO=/tmp/ib_debug_info.log
    /bin/rm -f $DEBUG_INFO
    touch $DEBUG_INFO
    echo "Hostname: `hostname -s`" >> $DEBUG_INFO
    test -e /etc/issue && echo "OS: `cat /etc/issue`" >> $DEBUG_INFO
    echo "Current kernel: `uname -r`" >> $DEBUG_INFO
    echo "Architecture: `uname -m`" >> $DEBUG_INFO
    echo "GCC version: `gcc --version`"  >> $DEBUG_INFO
    echo "CPU: `cat /proc/cpuinfo | /bin/grep -E \"model name|arch\" | head -1`" >> $DEBUG_INFO
    echo "`cat /proc/meminfo | /bin/grep \"MemTotal\"`" >> $DEBUG_INFO
    echo "Chipset: `/sbin/lspci 2> /dev/null | head -1 | cut -d ':' -f 2-`" >> $DEBUG_INFO

    echo >> $DEBUG_INFO
    get_sw_fw_info >> $DEBUG_INFO
    echo >> $DEBUG_INFO

    echo >> $DEBUG_INFO
    echo "############# LSPCI ##############" >> $DEBUG_INFO
    /sbin/lspci 2> /dev/null >> $DEBUG_INFO
    
    echo >> $DEBUG_INFO
    echo "############# LSPCI -N ##############" >> $DEBUG_INFO
    /sbin/lspci -n 2> /dev/null >> $DEBUG_INFO

    echo >> $DEBUG_INFO
    echo "############# LSMOD ##############" >> $DEBUG_INFO
    /sbin/lsmod >> $DEBUG_INFO
    
    echo >> $DEBUG_INFO
    echo "############# DMESG ##############" >> $DEBUG_INFO                                                            
    /bin/dmesg >> $DEBUG_INFO

    echo >> $DEBUG_INFO
    echo "############# Messages ##############" >> $DEBUG_INFO
    tail -50 /var/log/messages >> $DEBUG_INFO

    echo >> $DEBUG_INFO
    echo "############# Running Processes ##############" >> $DEBUG_INFO
    /bin/ps -ef >> $DEBUG_INFO
    echo "##############################################" >> $DEBUG_INFO

    eerror
    eerror "Please open an issue in the http://openib.org/bugzilla and attach $DEBUG_INFO"
    eerror
}

errata_58()
{
# Check AMD chipset issue Errata #58
if test -x /sbin/lspci && test -x /sbin/setpci; then
     if ( /sbin/lspci -nd 1022:1100 2> /dev/null | grep "1100" > /dev/null ) &&
        ( /sbin/lspci -nd 1022:7450 2> /dev/null | grep "7450" > /dev/null ) &&
        ( /sbin/lspci -nd 15b3:5a46 2> /dev/null | grep "5a46" > /dev/null ); then

        if ! ( grep FIX_AMD_8131_ERR58 $CONFIG > /dev/null ); then
            echo >> $CONFIG
            echo "# Set FIX_AMD_8131_ERR58=YES to apply AMD-8131 Errata #58 workaround" >> $CONFIG
            echo "FIX_AMD_8131_ERR58=\"YES\"" >> $CONFIG
        fi
        
        # Set default value for FIX_AMD_8131_ERR58
        if [ -z "$FIX_AMD_8131_ERR58" ]; then
                FIX_AMD_8131_ERR58="YES"
        fi
        
        CURVAL=`/sbin/setpci -d 1022:1100 69`

        for val in $CURVAL
        do
            if [ "${val}" != "c0" ]; then
                if [ "$FIX_AMD_8131_ERR58" == "YES" ]; then
                    /sbin/setpci -d 1022:1100 69=c0
                    if [ $? -eq 0 ]; then
                        # echo "AMD-8131 Errata #58 workaround applied"
                        break
                    else
                        echo "Failed to apply AMD-8131 Errata #58 workaround"
                    fi
                else
                    echo
                    echo "Invalid configuration found for PCI-X chipset AMD-8131 (Errata #58)"
                    echo
                    if [ "$RUNMODE" == "manual" ]; then
                        read -p "Do you wish to continue anyway? [y/N]:"
                        if [[ "$REPLY" != "y" && "$REPLY" != "yes" ]]; then
                            exit 1
                        fi
                        break
                    else
                        exit 1
                    fi
                fi
            fi
        done
    
    fi
fi

}

errata_56()
{
# Check AMD chipset issue Errata #56
if test -x /sbin/lspci && test -x /sbin/setpci; then
     if ( /sbin/lspci -nd 1022:1100 2> /dev/null | grep "1100" > /dev/null ) &&
        ( /sbin/lspci -nd 1022:7450 2> /dev/null | grep "7450" > /dev/null ) &&
        ( /sbin/lspci -nd 15b3:5a46 2> /dev/null | grep "5a46" > /dev/null ); then

        if ! ( grep FIX_AMD_8131_ERR56 $CONFIG > /dev/null ); then
            echo >> $CONFIG
            echo "# Set FIX_AMD_8131_ERR56=YES to apply AMD-8131 Errata #56 workaround" >> $CONFIG
            echo "FIX_AMD_8131_ERR56=\"YES\"" >> $CONFIG
        fi

        # Set default value for FIX_AMD_8131_ERR56
        if [ -z "$FIX_AMD_8131_ERR56" ]; then
                FIX_AMD_8131_ERR56="YES"
        fi

        bus=""

        # Look for devices AMD-8131
        for amd_dev in `/sbin/setpci -v -f -d 1022:7450 19 | cut -d':' -f1,2`
        do

                bus=`/sbin/setpci -s $amd_dev 19`
                rev=`/sbin/setpci -s $amd_dev 8`


                # Look for Tavor attach to secondary bus of this devices
                for device in `/sbin/setpci -f -s $bus: -d 15b3:5a46 19`
                do
                        if [ $rev -lt 13 ]; then
                                if [ "$FIX_AMD_8131_ERR56" == "YES" ]; then                     
                                        /sbin/setpci -d 15b3:5a44 72=14
                                        if [ $? -eq 0 ]; then
                                                # echo "AMD-8131 Errata #56 workaround applied"
                                                break
                                        else
                                                echo "Failed to apply AMD-8131 Errata #56 workaround"
                                        fi
                                else
                                        echo
                                        echo "Invalid configuration found for PCI-X chipset AMD-8131 (Errata #56)"
                                        echo

                                        if [ "$RUNMODE" == "manual" ]; then
                                                read -p "Do you wish to continue anyway? [y/N]:"
                                                if [[ "$REPLY" != "y" && "$REPLY" != "yes" ]]; then
                                                    exit 1
                                                fi
                                                break
                                        else
                                                exit 1
                                        fi
                                fi

                        else
                                continue
                        fi

                        # If more than one device is on the bus the issue a
                        # warning
                        num=`/sbin/setpci -f -s $bus: 0 | wc -l |  sed 's/\ *//g'`

                        if [ $num -gt 1 ]; then
                                echo "Warning: your current PCI-X configuration might be incorrect."
                                echo "see AMD-8131 Errata 56 for more details."
                        fi

                done
        done

     fi
fi
}

rotate_log()
{
        local log=$1
        if [ -s ${log} ]; then
                cat ${log} >> ${log}.$(date +%Y-%m-%d)
                /bin/rm -f ${log}
        fi
        touch ${log}
}

set_ipoib_cm()
{
        local i=$1
        shift

        if [ ! -e /sys/class/net/${i}/mode ]; then
                echo "Failed to configure IPoIB connected mode for ${i}"
                return 1
        fi

        echo connected > /sys/class/net/${i}/mode
        /sbin/ifconfig ${i} mtu ${IPOIB_MTU}
}

bring_up()
{
        local i=$1
        shift

        /etc/init.d/net.$i start
        
        if [ "X${SET_IPOIB_CM}" == "Xyes" ]; then
                set_ipoib_cm ${i}
        fi

        return $?
}

####
PRE_UNLOAD_MODULES="ib_rds ib_ucm kdapl ib_srp_target scsi_target ib_srp ib_iser ib_sdp rdma_ucm rdma_cm ib_addr ib_cm ib_local_sa findex"

# W/A for unloading modules
POST_UNLOAD_MODULES="$PRE_UNLOAD_MODULES ib_ipoib ib_sa ib_uverbs ib_umad"
# ib_mthca ib_ipath - dont unload unless they are in openib.conf
[[ "${MTHCA_LOAD}" == "yes" ]] && \
    POST_UNLOAD_MODULES="$POST_UNLOAD_MODULES ib_mthca"
[[ "${IPATH_LOAD}" == "yes" ]] && \
    POST_UNLOAD_MODULES="$POST_UNLOAD_MODULES ib_ipath ipath_core"

[[ "${MTHCA_LOAD}" == "yes" || "${IPATH_LOAD}" == "yes" ]] && \
    POST_UNLOAD_MODULES="$POST_UNLOAD_MODULES ib_mad ib_core"

#STATUS_MODULES="rdma_ucm ib_rds ib_srp ib_sdp rdma_cm ib_addr ib_local_sa findex ib_ipoib ib_ipath ipath_core ib_mthca ib_uverbs ib_umad ib_ucm ib_sa ib_cm ib_mad ib_core"

unload()
{
    # Unload module $1
    if is_module $mod; then
        /sbin/modprobe -r $mod > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            # Try rmmod if modprobe failed: case that previous installation included more IB modules.
            /sbin/rmmod $mod > /dev/null 2>&1
            if [ $? -ne 0 ]; then
                ewarn "Failed to unload $mod"
                return 1
            fi
        fi
    fi
}

start() {
    local RC=0
    ebegin "Initializing Infiniband"
    eindent

    # Load Mellanox HCA driver if explicitly requested
    # (however, it should be loaded automatically by udev)

    errata_58

    einfo "Loading HCA and Access Layer drivers"

	eindent
    if [[ "${MTHCA_LOAD}" == "yes" ]]; then
		ebegin "modprobe ib_mthca"
        /sbin/modprobe ib_mthca > /dev/null 2>&1
        RC=$[ $RC + $? ]
		eend $?
    fi
    if [[ "${IPATH_LOAD}" == "yes" ]]; then
		ebegin "modprobe ib_ipath"
        /sbin/modprobe ib_ipath > /dev/null 2>&1
        RC=$[ $RC + $? ]
		eend $?
    fi
    if [[ "${EHCA_LOAD}" == "yes" ]]; then
		ebegin "modprobe ib_ehca"
        /sbin/modprobe ib_ehca > /dev/null 2>&1
        RC=$[ $RC + $? ]
		eend $?
    fi
	eoutdent

    # Add node description to sysfs
    IBSYSDIR="/sys/class/infiniband"
    if [ -d ${IBSYSDIR} ]; then
        declare -i hca_id=1
        for hca in ${IBSYSDIR}/*; do
            if [ -e ${hca}/node_desc ]; then
                echo -n "$(hostname -s) HCA-${hca_id}" >> ${hca}/node_desc
            fi
            let hca_id++
        done
    fi

	eindent
	if [ $RC -eq 0 ]; then
		ebegin "modprobe ib_umad"
		/sbin/modprobe ib_umad > /dev/null 2>&1
		RC=$[ $RC + $? ]
		eend $RC
	fi
	if [ $RC -eq 0 ]; then
		ebegin "modprobe ib_uverbs"
		/sbin/modprobe ib_uverbs > /dev/null 2>&1
		RC=$[ $RC + $? ]
		eend $RC
	fi
	eoutdent

    if [ $RC -eq 0 ] && [ $IPOIB -eq 1 ]; then
        # this section is not necessary if all ip-over-ib devices are
        # aliased properly in /etc/modules.d/openib
        ebegin "modprobe ib_ipoib"
        /sbin/modprobe ib_ipoib > /dev/null 2>&1
        RC=$[ $RC + $? ]
		eend $?
    fi

    if [ $RC -ne 0 ]; then
        eerror "Loading HCA driver and Access Layer: "
        get_debug_info
        eoutdent
        eend $RC
        return
    fi

    if [ $IPOIB -eq 1 ]; then
        # start the ipoib devices automatically...
        # this is probably a bad idea (the concept is taken from the
        # original SUSE/Redhat-based initscript), and should be removed.
        # But it works, and is not enabled by default.  So I leave it here
        # for second opinions.
        get_interfaces
        for i in $interfaces
        do
            if [ -e /etc/init.d/net.$i ]; then
                einfo "starting ipoib device $i"
                bring_up $i
            fi
        done

        # leaving out the "Bring up child interfaces if configured" section.

        if [ "X${IPOIBHA_ENABLE}" == "Xyes" ]; then
            ipoib_ha_log="/var/log/ipoib_ha.log"
            rotate_log ${ipoib_ha_log}
            # Added sleep in order to wait for IPoIB interfaces to be UP
            sleep 1
            if [ ! -z "${PRIMARY_IPOIB_DEV}" ] && [ ! -z "${SECONDARY_IPOIB_DEV}" ]; then
                ipoib_ha.pl -p ${PRIMARY_IPOIB_DEV} -s ${SECONDARY_IPOIB_DEV} --with-arping --with-multicast -v > ${ipoib_ha_log} 2>&1 &
            else
                ipoib_ha.pl --with-arping --with-multicast -v > ${ipoib_ha_log} 2>&1 &
            fi
            ipoib_ha_pid=$!
            echo ${ipoib_ha_pid} > ${ipoib_ha_pidfile}
	elif [ "X${IPOIBBOND_ENABLE}" == "Xyes" ]; then
		if ( test ! -z $IPOIB_BONDS && which ib-bond &>/dev/null ) ; then
			echo Setting up bonding interfaces:
			for bond in $(echo $IPOIB_BONDS|tr , " ") ;  do
				eval bond_ip=\$${bond}_IP
				if [ -z $bond_ip ]; then
					echo No IP address defined for $bond
					continue
				fi
				eval bond_slaves=\$${bond}_SLAVES
				if [ -z $bond_slaves ]; then
					echo No slaves defined for $bond
					continue
				fi
				ib-bond --bond-name $bond --bond-ip $bond_ip --slaves $bond_slaves 
				RC=$?
				if [ $RC -eq 0 ] ; then
					einfo "Bringing up interface $bond"
				else
					eerror "Bringing up interface $bond"
				fi
				if [ "X${SET_IPOIB_CM}" == "Xyes" ]; then
					for slave in $(echo $bond_slaves|tr , " ") ; do
						set_ipoib_cm ${slave}
					done
				        /sbin/ifconfig $bond mtu ${IPOIB_MTU}
				fi
			done
		fi
        fi
    fi

    # Devices for ib_umad and ib_uverbs should now have been created.
    if [ ! -d /dev/infiniband/ ]; then
        eerror "udev failed to create '/dev/infiniband/' devices"
        RC=1
    fi

    # Load configured modules
    if [ "$POST_LOAD_MODULES" != "" ]; then
        for mod in  $POST_LOAD_MODULES
        do
            case $mod in
                ib_iser)
                    # Voltaire requirement
                    /sbin/modprobe --force-modversion $mod > /dev/null 2>&1
                ;;
                ib_srp)
                        /sbin/modprobe $mod > /dev/null 2>&1
                        if [ "X${SRPHA_ENABLE}" == "Xyes" ]; then
                            if [ ! -x /sbin/multipath ]; then
                                ewarn "/sbin/multipath is required to enable SRP HA."
                            else
                                # Create 91-srp.rules file
                                mkdir -p /etc/udev/rules.d
                                if [ "$DISTRIB" == "SuSE"  ]; then
                                    cat > /etc/udev/rules.d/91-srp.rules << EOF
ACTION=="add", KERNEL=="sd*[!0-9]", RUN+="/sbin/multipath %M:%m"
EOF
                                fi
                                /sbin/modprobe dm_multipath > /dev/null 2>&1
                                srp_daemon.sh &
                                srp_daemon_pid=$!
                                echo ${srp_daemon_pid} > ${srp_daemon_pidfile}
                            fi
                        fi
                ;;
                *)
                    /sbin/modprobe $mod > /dev/null 2>&1
                ;;
            esac
            RC=$?
            [ $RC -ne 0 ] && eerror "Failed to load $mod"
        done
    fi

    errata_56
    sleep 1

    # skipping udevstart stuff from ofed_scripts/openibd

   # Create vnic interfaces. This needs to be done after udevstart
    if [ "X${VNIC_LOAD}" == "Xyes" ]; then
            if [[ ! -e /dev/infiniband/umad0  &&  ! -e /dev/infiniband/umad1 ]]; then
                echo "/dev/infiniband/umad0 or /dev/infiniband/umad1 not present."
                echo "Cannot create VNIC interfaces."
                eerror "Bringing up VNIC interfaces"
            elif is_module ib_vnic; then
                echo "Setting up VNIC interfaces..."
                vnic_parser.pl -v > /dev/null 2>&1
                res=$?
                if [ $res != 0 ]; then
                    if [ $res == 2 ]; then
                        echo "Created VNIC interfaces but with errors. Please refer to /var/log/messages."
                        eerror "Bringing up VNIC interfaces"
                    else
                        echo "Error in parsing VNIC configuration file. Please refer to /var/log/messages."
                        eerror "Bringing up VNIC interfaces"
                    fi
                else
                    einfo "Bringing up VNIC interfaces"
                fi
            else
                echo "Module ib_vnic not loaded."
                eerror "Bringing up VNIC interfaces"
            fi
    fi

    if [ X${RENICE_IB_MAD} == "Xyes" ]; then
        # Set max_ports_num_in_hca variable
        count_ib_ports
        ports_num=$?
        list_of_ibmads=""
        for (( i=1 ; $i <= ${max_ports_num_in_hca} ; i++ ))
        do
                list_of_ibmads="${list_of_ibmads} ib_mad${i}"
        done

        ib_mad_pids=($(pidof ${list_of_ibmads} 2> /dev/null))
        num_of_root_ibmad_procs=$(/bin/ps h -o user -p ${ib_mad_pids[*]} | grep -w root | wc -l)
        get_pid_retries=0
        while [ ${num_of_root_ibmad_procs} -lt $ports_num ]
        do
            # Wait maximum for 5 sec to get ib_mad process pid
            if [ $get_pid_retries -gt 10 ]; then
                    echo Failed to get $ports_num ib_mad PIDs to renice. Got ${num_of_root_ibmad_procs}.
                    break
            fi
            usleep 500000
            ib_mad_pids=($(pidof ${list_of_ibmads} 2> /dev/null))
            num_of_root_ibmad_procs=$(/bin/ps h -o user -p ${ib_mad_pids[*]} | grep -w root | wc -l)
            let get_pid_retries++
        done
        for ib_mad_pid in ${ib_mad_pids[*]}
        do
            if [ "$(/bin/ps -p ${ib_mad_pid} h -o user 2> /dev/null)" == "root" ]; then
                    renice -19 ${ib_mad_pid} > /dev/null 2>&1
            fi
        done
    fi

    eoutdent
    eend $RC
}

unload()
{
        # Unload module $1
        local mod=$1
        local unload_log
        if is_module $mod; then
                /sbin/modprobe -r $mod > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                        # Try rmmod if modprobe failed: case that previous installation included more IB modules.
                        unload_log=`/sbin/rmmod $mod 2>&1`
                        if [ $? -ne 0 ]; then
                            eerror "Unloading $mod"
                            if [ ! -z "${unload_log}" ]; then
                                echo $unload_log
                            fi
                            # get_debug_info
                            [ ! -z $2 ] && echo $2
                            exit 1
                        fi    
                fi
        fi

}

stop() {
    ebegin "Stopping Infiniband"
    local RC=0

    # Check if applications which use infiniband are running
    local apps="opensm osmtest ibbs ibns"
    local pid

    for app in $apps
    do
        if ( ps -ef | grep $app | grep -v grep > /dev/null 2>&1 ); then
            eerror "Please stop $app and all applications running over InfiniBand"
            eend 1
            return
        fi
    done

    if ! is_module ib_core; then
        einfo "HCA driver is not loaded"
        eend 0
        return
    fi

    # Stop IPoIB HA daemon if running
    if [ -f $ipoib_ha_pidfile ]; then
            local line p
            read line < $ipoib_ha_pidfile
            for p in $line ; do
                    [ -z "${p//[0-9]/}" -a -d "/proc/$p" ] && ipoib_ha_pids="$ipoib_ha_pids $p"
            done
            /bin/rm -f $ipoib_ha_pidfile
    fi

    if [ -n "${ipoib_ha_pids:-}" ]; then
        kill -9 ${ipoib_ha_pids} > /dev/null 2>&1
        mcastpid=$(pidof -x mcasthandle)
        if [ -n "${mcastpid:-}" ]; then
            kill -9 ${mcastpid} > /dev/null 2>&1
        fi
    fi

    # Down all bond interfaces
    if ( which ib-bond &>/dev/null ) ; then
            ib-bond --stop-all
    fi

    # Stop SRP HA daemon if running
    if [ -f $srp_daemon_pidfile ]; then
            local line p
            read line < $srp_daemon_pidfile
            for p in $line ; do
                    [ -z "${p//[0-9]/}" -a -d "/proc/$p" ] && srp_daemon_pids="$srp_daemon_pids $p"
            done
            /bin/rm -f $srp_daemon_pidfile
    fi

    if [ -n "${srp_daemon_pids:-}" ]; then
        kill -15 ${srp_daemon_pids} > /dev/null 2>&1
    fi

    if [ "X${SRPHA_ENABLE}" == "Xyes" ]; then
            /bin/rm -f /etc/udev/rules.d/91-srp.rules > /dev/null 2>&1
            mpath_pids=$(pidof -x multipath)
            if [ -n "${mpath_pids:-}" ]; then
                kill -9 ${mpath_pids} > /dev/null 2>&1
            fi

            if is_module ib_srp; then
                for f in `/bin/ls /sys/class/scsi_host`
                do
                        if [ -f /sys/class/scsi_host/$f/local_ib_port ]; then
                                for i in `/bin/ls -d /sys/class/scsi_host/$f/device/target*/*/block* | awk -F: '{print $NF}'`
                                do
                                    mdev=`/sbin/scsi_id -g -s /block/$i 2> /dev/null`
                                    if [ -n "${mdev}" ]; then
                                        /sbin/multipath -f $mdev > /dev/null 2>&1
                                    fi
                                done
                        fi
                done
            fi
    fi

    # Unload modules
    if [ "$UNLOAD_MODULES" != "" ]; then
            for mod in  $UNLOAD_MODULES
            do
                    unload $mod
            done
    fi

    eend $RC
}

